#include <unity.h>
#include <memory>

#include "MemoryArea.hpp"
#include "Palette.hpp"
#include "PixelFormat.hpp"

class CanvasBufferRgb444c {
    public:
    CanvasBufferRgb444c(const MemoryArea &buffer, uint16_t width, uint16_t height)
        : buffer(buffer), width(width < 0x400 ? width & (0x3fe) : 0x400),
          height(height < 0x400 ? height & (0x3fe) : 0x3ff), color(0), backgroundColor(0) {}
    
    void hline(uint16_t x, uint16_t y, uint16_t length) {
        //TODO
    }

    void setColor(Color &color) {
        this->color = color.asRgb444() ;
    }

    private:
    const MemoryArea &buffer;
    const uint16_t width;
    const uint16_t height;
    uint16_t color;
    uint16_t backgroundColor;
};

class CanvasRgb444c {
    public:
    CanvasRgb444c(CanvasBufferRgb444c &buffer, Palette &palette) : buffer(buffer), palette(palette) {
        if (this->palette.size() >0) {
            this->buffer.setColor(palette.back()) ;
        }
    }

    void plot(uint16_t x, uint16_t y) {
        buffer.hline(x,y,1) ;
    }

    private:
    CanvasBufferRgb444c &buffer;
    Palette &palette;
};

/**
 * @brief Before test
 */
void setUp(void) {}

/**
 * @brief After test.
 */
void tearDown(void) {}

void canvas_plot__should_modify_one_pixel() {
    uint8_t buffer[24 * 16]; // for 16x16 pixels
    MemoryArea bufferArea(buffer, sizeof(buffer));
    CanvasBufferRgb444c cbuf(bufferArea, 16, 16);
    std::unique_ptr<Palette> p{PaletteHelper::getPalette(PaletteEnum::MONOCHROME_GREEN)};
    CanvasRgb444c c(cbuf, *p);
    for (uint16_t i = 0 ; i < 16 ; i++) {
        c.plot(i,i) ;
    }
    uint8_t expected[24 * 16] {
        //line 0
        0xbf,0xe0,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 1
        0x00,0x0b,0xfe,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 2
        0x00,0x00,0x00,/**/0xbf,0xe0,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 3
        0x00,0x00,0x00,/**/0x00,0x0b,0xfe,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 4
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0xbf,0xe0,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 5
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x0b,0xfe,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 6
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0xbf,0xe0,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 7
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x0b,0xfe,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 8
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0xbf,0xe0,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 9
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x0b,0xfe,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 10
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0xbf,0xe0,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 11
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x0b,0xfe,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,
        //line 12
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0xbf,0xe0,0x00,/**/0x00,0x00,0x00,
        //line 13
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x0b,0xfe,/**/0x00,0x00,0x00,
        //line 14
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0xbf,0xe0,0x00,
        //line 15
        0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x00,0x00,/**/0x00,0x0b,0xfe
    } ;
    TEST_ASSERT_EQUAL_UINT8_ARRAY((expected), (buffer), (sizeof(expected)));

}

int main(int argc, char **argv) {
    UNITY_BEGIN();
    RUN_TEST(canvas_plot__should_modify_one_pixel);
    UNITY_END();
}
